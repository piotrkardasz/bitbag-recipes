#Copy from https://github.com/symfony/recipes/blob/main/.github/workflows/callable-qa.yml
name: Q&A

on:
  workflow_call:
    inputs:
      branch:
        default: main
        required: false
        type: string
      contrib:
        required: false
        type: boolean
      find_yaml:
        required: false
        type: string
      create_project_php:
        default: '7.4'
        required: false
        type: string

jobs:
  run-checks:
    name: Run checks
    runs-on: Ubuntu-20.04

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        id: checkout
        with:
          fetch-depth: 0
          ref: 'refs/pull/${{ github.event.number }}/merge'

      -
        name: Install tools
        run: |
          git config --global user.email ""
          git config --global user.name "github-action[bot]"
          cd .github
          wget -q -O recipes-checker.zip https://codeload.github.com/symfony-tools/recipes-checker/zip/refs/heads/main
          unzip recipes-checker.zip
          cd recipes-checker-main
          composer install --ansi --no-dev

      -
        name: Check manifest.json files
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          .github/recipes-checker-main/run lint:manifests ${{ inputs.contrib && '--contrib' || '' }}

      -
        name: Remove non-patched packages
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          .github/recipes-checker-main/run list-unpatched-packages $GITHUB_EVENT_PATH ${{ secrets.GITHUB_TOKEN }} | xargs -r -n10 rm -rf

      -
        name: Generate Flex testing endpoint
        if: "always() && steps.checkout.outcome == 'success' && github.base_ref == inputs.branch"
        run: |
          mkdir .github/flex-endpoint
          git ls-tree HEAD */*/* | php .github/recipes-checker-main/run generate:flex-endpoint ${{ github.repository }} ${{ inputs.branch }} flex/pull-${{ github.event.number }} .github/flex-endpoint ${{ inputs.contrib && '--contrib' || '' }}
          git stash
          git switch -c pr
          git switch --orphan flex/pull-${{ github.event.number }}
          git reset --hard -q
          mv .github/flex-endpoint/*.json .
          git add *.json
          git commit -m 'Create Flex endpoint' || true
          git push origin -f flex/pull-${{ github.event.number }}
          git switch pr
          git stash pop -q || true

      -
        name: Compute diff between recipe versions
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          find * -mindepth 1 -maxdepth 1 -type d | sort \
              | .github/recipes-checker-main/run diff-recipe-versions 'https://raw.githubusercontent.com/${{ github.repository }}/flex/pull-${{ github.event.number }}/index.json' \
              > .github/diff-recipe-versions.md

      -
        name: Post diff between recipe versions
        if: "always() && steps.checkout.outcome == 'success'"
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: .github/diff-recipe-versions.md

      -
        name: No symlinks
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          SYMLINKS=$(find * -type l)
          
          if [[ "" != "$SYMLINKS" ]]; then echo -e "::error::Symlinks are not allowed\nFound $SYMLINKS\n"; exit 1; fi

      -
        name: No .yml, use .yaml
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          YMLS=$(find * -name '*.yml' ${{ inputs.find_yaml }})
          
          if [[ "" != "$YMLS" ]]; then echo -e "::error::*.yml files should renamed to *.yaml\nFound $YMLS\n"; exit 1; fi

      -
        name: No .gitkeep, use .gitignore
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          GITKEEPS=$(find * -name .gitkeep)
          
          if [[ "" != "$GITKEEPS" ]]; then echo -e "::error::.gitkeep files should be renamed to .gitignore\nFound $GITKEEPS\n"; exit 1; fi

      -
        name: 4 spaces indentation
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(find * -name '*.yaml' -or -name '*.json' \
              | xargs -n1 grep -P -H -n -v '^((    )*[^ \t]|$)' \
              | cut -d: -f1-2 \
              | sed 's/\(.*\):\([0-9]*\)$/\\n::error file=\1,line=\2::Indendation must be a multiple of 4 spaces/' || true)
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

      -
        name: Text files end with a newline
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(find * -name '*.yaml' -or -name '*.yml' -or -name '*.txt' -or -name '*.md' -or -name '*.markdown' \
                  -or -name '*.json' -or -name '*.rst' -or -name '*.php' -or -name '*.js' -or -name '*.css' -or -name '*.twig' \
              | xargs -n1 -I{} bash -c '[ -n "$(tail -c1 {})" ] && echo ::error file={},line=$((1 + `wc -l {} | cut -d" " -f1`))::Should end with a newline' || true)
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

      -
        name: Use https when referencing symfony.com
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(grep -H -n 'http://.*symfony\.com' * -r \
              | cut -d: -f1-2 \
              | sed 's/\(.*\):\([0-9]*\)$/\\n::error file=\1,line=\2::Use https when referencing symfony.com/' || true)
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

      -
        name: manifest.json is found
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          MISSING=$(find * -mindepth 2 -maxdepth 2 -type d '!' -exec test -f '{}/manifest.json' ';' -print)
          
          if [[ "" != "$MISSING" ]]; then echo -e "::error::Recipes must define a \"manifest.json\" file\nFile not found in $MISSING\n"; exit 1; fi

      -
        name: JSON files are valid
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(find * -name '*.json' | parallel -j+3 -i{} -n1 bash -c 'ERR=$(python -mjson.tool {} 2>&1 1> /dev/null) || echo \\n::error file={},line=`echo "${ERR#*: line }" | cut -d" " -f 1`::${ERR%%: line *}')
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

      -
        name: YAML files are valid
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          find * -name '*.yaml' -or -name '*.yml' | .github/recipes-checker-main/run lint:yaml

      -
        name: Packages exist on packagist.org
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          .github/recipes-checker-main/run lint:packages

      -
        name: Parameters should be defined via the "container" configurator
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(find */*/*/config/packages/ -name '*.yaml' -or -name '*.yml' \
              | xargs -n1 grep -P -H -n '^parameters:' \
              | cut -d: -f1-2 \
              | sed 's/\(.*\):\([0-9]*\)$/\\n::error file=\1,line=\2::"parameters" should be defined via the "container" configurator instead/' || true)
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

      -
        name: Underscore notation under config/
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(find */*/*/config -type f \
              | grep -v -P '[^/]+/[^/]+/[^/]+/config/[0-9a-z_./]+$' \
              | xargs -n1 -I{} echo "::error file={}::Underscore notation is required for file and directory names under config/" || true)
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

      -
        name: Yaml nulls should not be "~"
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(find * -name '*.yaml' -or -name '*.yml' \
              | xargs -n1 grep -F -H -n ': ~'\
              | cut -d: -f1-2 \
              | sed 's/\(.*\):\([0-9]*\)$/\\n::error file=\1,line=\2::"~" should be replaced with "null"/' || true)
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

      -
        name: Symfony commands should not be wrapped in a Makefile
        if: "always() && steps.checkout.outcome == 'success'"
        run: |
          ERRORS=$(find * -name Makefile \
              | xargs -n1 grep -P -H -n 'bin/console|\$\(CONSOLE\)' \
              | cut -d: -f1-2 \
              | sed 's/\(.*\):\([0-9]*\)$/\\n::error file=\1,line=\2::Symfony commands should not be wrapped in a Makefile/' || true)
          
          if [[ "" != "$ERRORS" ]]; then echo -e "$ERRORS\n"; exit 1; fi

  create-project:
    needs: run-checks
    name: "Run updated recipes on PHP ${{ matrix.php }}, Sylius ${{ matrix.sylius }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }}"
    runs-on: Ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        php: [ "7.4" ]
        symfony: [ "^4.4", "^5.2" ]
        sylius: [ "1.9", "1.10" ]
        mysql: [ "5.7" ]

    env:
      DATABASE_URL: "mysql://root:root@127.0.0.1/sylius?serverVersion=${{ matrix.mysql }}"

    steps:
      -
        name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: intl
          tools: symfony
          coverage: none

      -
        name: Shutdown default MySQL
        run: sudo service mysql stop

      -
        name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: "${{ matrix.mysql }}"
          mysql root password: "root"

      -
        name: Export configuration
        continue-on-error: true
        id: config
        run: |
          PACKAGES=$(curl -s https://raw.githubusercontent.com/${{ github.repository }}/flex/pull-${{ github.event.number }}/index.json | jq -r '.recipes | to_entries | map(.key+":^"+.value[-1]) | join(" ")')
          echo PACKAGES=$PACKAGES >> $GITHUB_ENV
          [[ "" != "$PACKAGES" ]]

      -
        name: Create-project
        if: "always() && steps.config.outcome == 'success'"
        run: |
          set -x
          composer create-project --ansi "sylius/sylius-standard:${{ matrix.sylius }}.*" ${{ matrix.sylius }}
          cd ${{ matrix.sylius }}
          composer config extra.symfony.require "${{ matrix.symfony }}"
          composer config extra.symfony.allow-contrib ${{ inputs.contrib && 'true' || 'false' }}
          composer config minimum-stability dev
          export SYMFONY_ENDPOINT=https://raw.githubusercontent.com/${{ github.repository }}/flex/pull-${{ github.event.number }}/index.json
          composer require -W --ansi $PACKAGES
